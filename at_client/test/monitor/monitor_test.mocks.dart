// Mocks generated by Mockito 5.0.17 from annotations
// in at_client/test/monitor/monitor_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:convert' as _i4;
import 'dart:io' as _i3;
import 'dart:typed_data' as _i11;

import 'package:at_client/at_client.dart' as _i8;
import 'package:at_client/src/manager/monitor.dart' as _i7;
import 'package:at_commons/at_builders.dart' as _i12;
import 'package:at_commons/at_commons.dart' as _i9;
import 'package:at_lookup/at_lookup.dart' as _i2;
import 'package:at_lookup/src/connection/at_connection.dart' as _i10;
import 'package:at_utils/at_logger.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeOutboundConnection_0 extends _i1.Fake
    implements _i2.OutboundConnection {}

class _FakeSocket_1 extends _i1.Fake implements _i3.Socket {}

class _FakeInternetAddress_2 extends _i1.Fake implements _i3.InternetAddress {}

class _FakeEncoding_3 extends _i1.Fake implements _i4.Encoding {}

class _FakeStreamSubscription_4<T> extends _i1.Fake
    implements _i5.StreamSubscription<T> {}

class _FakeAtSignLogger_5 extends _i1.Fake implements _i6.AtSignLogger {}

class _FakeAtLookupImpl_6 extends _i1.Fake implements _i2.AtLookupImpl {}

/// A class which mocks [MonitorConnectivityChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockMonitorConnectivityChecker extends _i1.Mock
    implements _i7.MonitorConnectivityChecker {
  MockMonitorConnectivityChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> checkConnectivity(_i8.RemoteSecondary? remoteSecondary) =>
      (super.noSuchMethod(
          Invocation.method(#checkConnectivity, [remoteSecondary]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [MonitorOutboundConnectionFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockMonitorOutboundConnectionFactory extends _i1.Mock
    implements _i7.MonitorOutboundConnectionFactory {
  MockMonitorOutboundConnectionFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.OutboundConnection> createConnection(String? secondaryUrl) =>
      (super.noSuchMethod(Invocation.method(#createConnection, [secondaryUrl]),
              returnValue: Future<_i2.OutboundConnection>.value(
                  _FakeOutboundConnection_0()))
          as _i5.Future<_i2.OutboundConnection>);
}

/// A class which mocks [OutboundConnection].
///
/// See the documentation for Mockito's code generation for more information.
class MockOutboundConnection extends _i1.Mock
    implements _i2.OutboundConnection {
  MockOutboundConnection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set buffer(_i9.StringBuffer? _buffer) =>
      super.noSuchMethod(Invocation.setter(#buffer, _buffer),
          returnValueForMissingStub: null);
  @override
  set metaData(_i10.AtConnectionMetaData? _metaData) =>
      super.noSuchMethod(Invocation.setter(#metaData, _metaData),
          returnValueForMissingStub: null);
  @override
  void setIdleTime(int? idleTimeMillis) =>
      super.noSuchMethod(Invocation.method(#setIdleTime, [idleTimeMillis]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i3.Socket getSocket() =>
      (super.noSuchMethod(Invocation.method(#getSocket, []),
          returnValue: _FakeSocket_1()) as _i3.Socket);
  @override
  _i5.Future<void> write(String? data) =>
      (super.noSuchMethod(Invocation.method(#write, [data]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  bool isInValid() =>
      (super.noSuchMethod(Invocation.method(#isInValid, []), returnValue: false)
          as bool);
}

/// A class which mocks [SecureSocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureSocket extends _i1.Mock implements _i3.SecureSocket {
  MockSecureSocket() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get port =>
      (super.noSuchMethod(Invocation.getter(#port), returnValue: 0) as int);
  @override
  int get remotePort =>
      (super.noSuchMethod(Invocation.getter(#remotePort), returnValue: 0)
          as int);
  @override
  _i3.InternetAddress get address =>
      (super.noSuchMethod(Invocation.getter(#address),
          returnValue: _FakeInternetAddress_2()) as _i3.InternetAddress);
  @override
  _i3.InternetAddress get remoteAddress =>
      (super.noSuchMethod(Invocation.getter(#remoteAddress),
          returnValue: _FakeInternetAddress_2()) as _i3.InternetAddress);
  @override
  _i5.Future<dynamic> get done => (super.noSuchMethod(Invocation.getter(#done),
      returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  bool get isBroadcast =>
      (super.noSuchMethod(Invocation.getter(#isBroadcast), returnValue: false)
          as bool);
  @override
  _i5.Future<int> get length => (super.noSuchMethod(Invocation.getter(#length),
      returnValue: Future<int>.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<bool> get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<_i11.Uint8List> get first =>
      (super.noSuchMethod(Invocation.getter(#first),
              returnValue: Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i5.Future<_i11.Uint8List>);
  @override
  _i5.Future<_i11.Uint8List> get last =>
      (super.noSuchMethod(Invocation.getter(#last),
              returnValue: Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i5.Future<_i11.Uint8List>);
  @override
  _i5.Future<_i11.Uint8List> get single =>
      (super.noSuchMethod(Invocation.getter(#single),
              returnValue: Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i5.Future<_i11.Uint8List>);
  @override
  _i4.Encoding get encoding => (super.noSuchMethod(Invocation.getter(#encoding),
      returnValue: _FakeEncoding_3()) as _i4.Encoding);
  @override
  set encoding(_i4.Encoding? _encoding) =>
      super.noSuchMethod(Invocation.setter(#encoding, _encoding),
          returnValueForMissingStub: null);
  @override
  void renegotiate(
          {bool? useSessionCache = true,
          bool? requestClientCertificate = false,
          bool? requireClientCertificate = false}) =>
      super.noSuchMethod(
          Invocation.method(#renegotiate, [], {
            #useSessionCache: useSessionCache,
            #requestClientCertificate: requestClientCertificate,
            #requireClientCertificate: requireClientCertificate
          }),
          returnValueForMissingStub: null);
  @override
  void destroy() => super.noSuchMethod(Invocation.method(#destroy, []),
      returnValueForMissingStub: null);
  @override
  bool setOption(_i3.SocketOption? option, bool? enabled) =>
      (super.noSuchMethod(Invocation.method(#setOption, [option, enabled]),
          returnValue: false) as bool);
  @override
  _i11.Uint8List getRawOption(_i3.RawSocketOption? option) =>
      (super.noSuchMethod(Invocation.method(#getRawOption, [option]),
          returnValue: _i11.Uint8List(0)) as _i11.Uint8List);
  @override
  void setRawOption(_i3.RawSocketOption? option) =>
      super.noSuchMethod(Invocation.method(#setRawOption, [option]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<dynamic> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Stream<_i11.Uint8List> asBroadcastStream(
          {void Function(_i5.StreamSubscription<_i11.Uint8List>)? onListen,
          void Function(_i5.StreamSubscription<_i11.Uint8List>)? onCancel}) =>
      (super.noSuchMethod(
              Invocation.method(#asBroadcastStream, [],
                  {#onListen: onListen, #onCancel: onCancel}),
              returnValue: Stream<_i11.Uint8List>.empty())
          as _i5.Stream<_i11.Uint8List>);
  @override
  _i5.StreamSubscription<_i11.Uint8List> listen(
          void Function(_i11.Uint8List)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_4<_i11.Uint8List>())
          as _i5.StreamSubscription<_i11.Uint8List>);
  @override
  _i5.Stream<_i11.Uint8List> where(bool Function(_i11.Uint8List)? test) =>
      (super.noSuchMethod(Invocation.method(#where, [test]),
              returnValue: Stream<_i11.Uint8List>.empty())
          as _i5.Stream<_i11.Uint8List>);
  @override
  _i5.Stream<S> map<S>(S Function(_i11.Uint8List)? convert) =>
      (super.noSuchMethod(Invocation.method(#map, [convert]),
          returnValue: Stream<S>.empty()) as _i5.Stream<S>);
  @override
  _i5.Stream<E> asyncMap<E>(
          _i5.FutureOr<E>? Function(_i11.Uint8List)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncMap, [convert]),
          returnValue: Stream<E>.empty()) as _i5.Stream<E>);
  @override
  _i5.Stream<E> asyncExpand<E>(
          _i5.Stream<E>? Function(_i11.Uint8List)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncExpand, [convert]),
          returnValue: Stream<E>.empty()) as _i5.Stream<E>);
  @override
  _i5.Stream<_i11.Uint8List> handleError(Function? onError,
          {bool Function(dynamic)? test}) =>
      (super.noSuchMethod(
              Invocation.method(#handleError, [onError], {#test: test}),
              returnValue: Stream<_i11.Uint8List>.empty())
          as _i5.Stream<_i11.Uint8List>);
  @override
  _i5.Stream<S> expand<S>(Iterable<S> Function(_i11.Uint8List)? convert) =>
      (super.noSuchMethod(Invocation.method(#expand, [convert]),
          returnValue: Stream<S>.empty()) as _i5.Stream<S>);
  @override
  _i5.Future<dynamic> pipe(
          _i5.StreamConsumer<_i11.Uint8List>? streamConsumer) =>
      (super.noSuchMethod(Invocation.method(#pipe, [streamConsumer]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Stream<S> transform<S>(
          _i5.StreamTransformer<_i11.Uint8List, S>? streamTransformer) =>
      (super.noSuchMethod(Invocation.method(#transform, [streamTransformer]),
          returnValue: Stream<S>.empty()) as _i5.Stream<S>);
  @override
  _i5.Future<_i11.Uint8List> reduce(
          _i11.Uint8List Function(_i11.Uint8List, _i11.Uint8List)? combine) =>
      (super.noSuchMethod(Invocation.method(#reduce, [combine]),
              returnValue: Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i5.Future<_i11.Uint8List>);
  @override
  _i5.Future<S> fold<S>(
          S? initialValue, S Function(S, _i11.Uint8List)? combine) =>
      (super.noSuchMethod(Invocation.method(#fold, [initialValue, combine]),
          returnValue: Future<S>.value(null)) as _i5.Future<S>);
  @override
  _i5.Future<String> join([String? separator = r'']) =>
      (super.noSuchMethod(Invocation.method(#join, [separator]),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<bool> contains(Object? needle) =>
      (super.noSuchMethod(Invocation.method(#contains, [needle]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<dynamic> forEach(void Function(_i11.Uint8List)? action) =>
      (super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<bool> every(bool Function(_i11.Uint8List)? test) =>
      (super.noSuchMethod(Invocation.method(#every, [test]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> any(bool Function(_i11.Uint8List)? test) =>
      (super.noSuchMethod(Invocation.method(#any, [test]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Stream<R> cast<R>() => (super.noSuchMethod(Invocation.method(#cast, []),
      returnValue: Stream<R>.empty()) as _i5.Stream<R>);
  @override
  _i5.Future<List<_i11.Uint8List>> toList() => (super.noSuchMethod(
          Invocation.method(#toList, []),
          returnValue: Future<List<_i11.Uint8List>>.value(<_i11.Uint8List>[]))
      as _i5.Future<List<_i11.Uint8List>>);
  @override
  _i5.Future<Set<_i11.Uint8List>> toSet() => (super.noSuchMethod(
          Invocation.method(#toSet, []),
          returnValue: Future<Set<_i11.Uint8List>>.value(<_i11.Uint8List>{}))
      as _i5.Future<Set<_i11.Uint8List>>);
  @override
  _i5.Future<E> drain<E>([E? futureValue]) =>
      (super.noSuchMethod(Invocation.method(#drain, [futureValue]),
          returnValue: Future<E>.value(null)) as _i5.Future<E>);
  @override
  _i5.Stream<_i11.Uint8List> take(int? count) =>
      (super.noSuchMethod(Invocation.method(#take, [count]),
              returnValue: Stream<_i11.Uint8List>.empty())
          as _i5.Stream<_i11.Uint8List>);
  @override
  _i5.Stream<_i11.Uint8List> takeWhile(bool Function(_i11.Uint8List)? test) =>
      (super.noSuchMethod(Invocation.method(#takeWhile, [test]),
              returnValue: Stream<_i11.Uint8List>.empty())
          as _i5.Stream<_i11.Uint8List>);
  @override
  _i5.Stream<_i11.Uint8List> skip(int? count) =>
      (super.noSuchMethod(Invocation.method(#skip, [count]),
              returnValue: Stream<_i11.Uint8List>.empty())
          as _i5.Stream<_i11.Uint8List>);
  @override
  _i5.Stream<_i11.Uint8List> skipWhile(bool Function(_i11.Uint8List)? test) =>
      (super.noSuchMethod(Invocation.method(#skipWhile, [test]),
              returnValue: Stream<_i11.Uint8List>.empty())
          as _i5.Stream<_i11.Uint8List>);
  @override
  _i5.Stream<_i11.Uint8List> distinct(
          [bool Function(_i11.Uint8List, _i11.Uint8List)? equals]) =>
      (super.noSuchMethod(Invocation.method(#distinct, [equals]),
              returnValue: Stream<_i11.Uint8List>.empty())
          as _i5.Stream<_i11.Uint8List>);
  @override
  _i5.Future<_i11.Uint8List> firstWhere(bool Function(_i11.Uint8List)? test,
          {_i11.Uint8List Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#firstWhere, [test], {#orElse: orElse}),
              returnValue: Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i5.Future<_i11.Uint8List>);
  @override
  _i5.Future<_i11.Uint8List> lastWhere(bool Function(_i11.Uint8List)? test,
          {_i11.Uint8List Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#lastWhere, [test], {#orElse: orElse}),
              returnValue: Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i5.Future<_i11.Uint8List>);
  @override
  _i5.Future<_i11.Uint8List> singleWhere(bool Function(_i11.Uint8List)? test,
          {_i11.Uint8List Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#singleWhere, [test], {#orElse: orElse}),
              returnValue: Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i5.Future<_i11.Uint8List>);
  @override
  _i5.Future<_i11.Uint8List> elementAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#elementAt, [index]),
              returnValue: Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i5.Future<_i11.Uint8List>);
  @override
  _i5.Stream<_i11.Uint8List> timeout(Duration? timeLimit,
          {void Function(_i5.EventSink<_i11.Uint8List>)? onTimeout}) =>
      (super.noSuchMethod(
              Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
              returnValue: Stream<_i11.Uint8List>.empty())
          as _i5.Stream<_i11.Uint8List>);
  @override
  void add(List<int>? data) =>
      super.noSuchMethod(Invocation.method(#add, [data]),
          returnValueForMissingStub: null);
  @override
  void write(Object? object) =>
      super.noSuchMethod(Invocation.method(#write, [object]),
          returnValueForMissingStub: null);
  @override
  void writeAll(Iterable<dynamic>? objects, [String? separator = r'']) =>
      super.noSuchMethod(Invocation.method(#writeAll, [objects, separator]),
          returnValueForMissingStub: null);
  @override
  void writeln([Object? object = r'']) =>
      super.noSuchMethod(Invocation.method(#writeln, [object]),
          returnValueForMissingStub: null);
  @override
  void writeCharCode(int? charCode) =>
      super.noSuchMethod(Invocation.method(#writeCharCode, [charCode]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<dynamic> addStream(_i5.Stream<List<int>>? stream) =>
      (super.noSuchMethod(Invocation.method(#addStream, [stream]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> flush() =>
      (super.noSuchMethod(Invocation.method(#flush, []),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
}

/// A class which mocks [StreamSubscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamSubscription<T> extends _i1.Mock
    implements _i5.StreamSubscription<T> {
  MockStreamSubscription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);
  @override
  _i5.Future<void> cancel() =>
      (super.noSuchMethod(Invocation.method(#cancel, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void onData(void Function(T)? handleData) =>
      super.noSuchMethod(Invocation.method(#onData, [handleData]),
          returnValueForMissingStub: null);
  @override
  void onError(Function? handleError) =>
      super.noSuchMethod(Invocation.method(#onError, [handleError]),
          returnValueForMissingStub: null);
  @override
  void onDone(void Function()? handleDone) =>
      super.noSuchMethod(Invocation.method(#onDone, [handleDone]),
          returnValueForMissingStub: null);
  @override
  void pause([_i5.Future<void>? resumeSignal]) =>
      super.noSuchMethod(Invocation.method(#pause, [resumeSignal]),
          returnValueForMissingStub: null);
  @override
  void resume() => super.noSuchMethod(Invocation.method(#resume, []),
      returnValueForMissingStub: null);
  @override
  _i5.Future<E> asFuture<E>([E? futureValue]) =>
      (super.noSuchMethod(Invocation.method(#asFuture, [futureValue]),
          returnValue: Future<E>.value(null)) as _i5.Future<E>);
}

/// A class which mocks [RemoteSecondary].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteSecondary extends _i1.Mock implements _i8.RemoteSecondary {
  MockRemoteSecondary() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AtSignLogger get logger => (super.noSuchMethod(Invocation.getter(#logger),
      returnValue: _FakeAtSignLogger_5()) as _i6.AtSignLogger);
  @override
  set logger(_i6.AtSignLogger? _logger) =>
      super.noSuchMethod(Invocation.setter(#logger, _logger),
          returnValueForMissingStub: null);
  @override
  _i2.AtLookupImpl get atLookUp =>
      (super.noSuchMethod(Invocation.getter(#atLookUp),
          returnValue: _FakeAtLookupImpl_6()) as _i2.AtLookupImpl);
  @override
  set atLookUp(_i2.AtLookupImpl? _atLookUp) =>
      super.noSuchMethod(Invocation.setter(#atLookUp, _atLookUp),
          returnValueForMissingStub: null);
  @override
  _i5.Future<String> executeVerb(_i12.VerbBuilder? builder,
          {bool? sync = false}) =>
      (super.noSuchMethod(
          Invocation.method(#executeVerb, [builder], {#sync: sync}),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<String> executeAndParse(_i12.VerbBuilder? builder,
          {dynamic sync = false}) =>
      (super.noSuchMethod(
          Invocation.method(#executeAndParse, [builder], {#sync: sync}),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<String?> executeCommand(String? atCommand, {bool? auth = false}) =>
      (super.noSuchMethod(
          Invocation.method(#executeCommand, [atCommand], {#auth: auth}),
          returnValue: Future<String?>.value()) as _i5.Future<String?>);
  @override
  void addStreamData(List<int>? data) =>
      super.noSuchMethod(Invocation.method(#addStreamData, [data]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<bool> authenticate(dynamic privateKey) =>
      (super.noSuchMethod(Invocation.method(#authenticate, [privateKey]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> authenticateCram(dynamic secret) =>
      (super.noSuchMethod(Invocation.method(#authenticateCram, [secret]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<String?> sync(int? lastSyncedId, {String? regex}) => (super
      .noSuchMethod(Invocation.method(#sync, [lastSyncedId], {#regex: regex}),
          returnValue: Future<String?>.value()) as _i5.Future<String?>);
  @override
  _i5.Future<_i2.OutboundConnection> monitor(String? command,
          Function? notificationCallBack, String? privateKey) =>
      (super.noSuchMethod(
              Invocation.method(
                  #monitor, [command, notificationCallBack, privateKey]),
              returnValue: Future<_i2.OutboundConnection>.value(
                  _FakeOutboundConnection_0()))
          as _i5.Future<_i2.OutboundConnection>);
  @override
  _i5.Future<String?> findSecondaryUrl() =>
      (super.noSuchMethod(Invocation.method(#findSecondaryUrl, []),
          returnValue: Future<String?>.value()) as _i5.Future<String?>);
  @override
  _i5.Future<bool> isAvailable() =>
      (super.noSuchMethod(Invocation.method(#isAvailable, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}
