# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: at_client_sdk

on:
  push:
    branches:
      - trunk
  pull_request:
    branches:
      - trunk

jobs:
  unit_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      - uses: dart-lang/setup-dart@v1.3
        with:
          sdk: stable

      # Install dependencies in at_client library
      - name: Install dependencies in at_client
        working-directory: at_client
        run: dart pub get

      # Run analyzer in at_client library
      - name: Analyze project source in at_client
        working-directory: at_client
        run: dart analyze

      # Run unit tests
      - name: Run unit tests, with code coverage measurement
        working-directory: at_client
        run: dart test --concurrency=1 --coverage="coverage"

      - name: Convert coverage to LCOV format
        working-directory: at_client
        run: pub run coverage:format_coverage --lcov --in=coverage --out=coverage.lcov --packages=.packages --report-on=lib

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.0.0
        with:
          token: ${{secrets.CODECOV_TOKEN_AT_CLIENT_SDK}}
          file: at_client/coverage.lcov
          flags: unit_tests

      # Install dependencies in at_functional_test
      - name: Install dependencies in at_functional_test
        working-directory: at_functional_test
        run: dart pub get

      - name: Add entry to hosts file
        run: echo "127.0.0.1    vip.ve.atsign.zone" | sudo tee -a /etc/hosts

      # Start docker container to run functional tests
      - name: Start docker instance
        working-directory: at_functional_test/test
        run: docker-compose up -d

      - name: Check for docker container readiness
        working-directory: at_functional_test
        run: dart run test/check_docker_readiness.dart

      - name: Run PKAM
        run: docker exec test_virtualenv_1 supervisorctl start pkamLoad

      - name: Check test environment readiness
        working-directory: at_functional_test
        run: dart run test/check_test_env.dart

      # Run functional tests
      - name: Run functional tests
        working-directory: at_functional_test
        run: dart test --concurrency=1 --coverage="coverage"

      - name: Convert coverage to LCOV format
        working-directory: at_functional_test
        run: pub run coverage:format_coverage --lcov --in=coverage --out=coverage.lcov --packages=.packages --report-on=../at_client/lib

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.0.0
        with:
          token: ${{secrets.CODECOV_TOKEN_AT_CLIENT_SDK}}
          file: at_functional_test/coverage.lcov
          flags: functional_tests

      # Adding flutter to path
      - name: Installing Flutter
        uses: britannio/action-install-flutter@v1.1
        with:
          version: stable

      # Install dependencies of at_client_mobile
      - name: Installing dependencies
        working-directory: at_client_mobile
        run: flutter pub get

      # Analyze at_client_mobile package
      - name: flutter analyze
        working-directory: at_client_mobile
        run: flutter analyze

      # stop docker containers
      - name: stop docker containers
        working-directory: at_functional_test/test
        run: docker-compose down

  # The Job runs end2end tests
  end2end_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: dart-lang/setup-dart@v1.3
        with:
          sdk: stable

      - name: Install dependencies in at_client
        working-directory: at_client
        run: dart pub get

      # Install dependencies in at_end2end_test
      - name: Install dependencies in at_end2end_test
        working-directory: at_end2end_test
        run: dart pub get

      # Populate at_credentials.dart from CICD_DATA_DART secret
      - name: Get CICD keys into place
        run: echo "${{secrets.AT_CICD_CREDENTIALS}}" > at_end2end_test/test/at_credentials.dart

      # Run end-to-end test
      - name: End to end test
        working-directory: at_end2end_test
        run: dart test --concurrency=1